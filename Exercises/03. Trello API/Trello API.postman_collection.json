{
	"info": {
		"_postman_id": "2b6489e3-e8e7-4851-b756-c2735c8082a9",
		"name": "Trello API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22794277",
		"_collection_link": "https://www.postman.com/orange-eclipse-461318/workspace/postman-course/collection/22794277-2b6489e3-e8e7-4851-b756-c2735c8082a9?action=share&source=collection_link&creator=22794277"
	},
	"item": [
		{
			"name": "Get All Boaards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/members/me/boards?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the name of the created board\", () => {\r",
							"  const res = pm.response.json();\r",
							"\r",
							"  pm.expect(res).to.be.an(\"object\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"name\");\r",
							"  const curName = res.name;\r",
							"  const usedName = pm.collectionVariables.get('randomBoardName');pm.expect(curName).to.eql(usedName)\r",
							"\r",
							"  pm.collectionVariables.set('boardId', res.id)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomName() {\r",
							"    let boardName = Math.random().toString(36).substring(7);\r",
							"    return boardName\r",
							"}\r",
							"pm.collectionVariables.set('randomBoardName', randomName())"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/?name={{randomBoardName}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{randomBoardName}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the id and name of the created board\", () => {\r",
							"  const res = pm.response.json();\r",
							"\r",
							"  pm.expect(res).to.be.an(\"object\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"name\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"id\");\r",
							"  const curName = res.name;\r",
							"  const curId = res.id;\r",
							"  const usedName = pm.collectionVariables.get('randomBoardName');\r",
							"  const usedId = pm.collectionVariables.get('boardId');\r",
							"  pm.expect(curName).to.eql(usedName);\r",
							"  pm.expect(curId).to.eql(usedId)\r",
							"\r",
							"  pm.collectionVariables.set('boardId', res.id)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Done list Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the id of the board where the list is created\", () => {\r",
							"  const res = pm.response.json();\r",
							"\r",
							"  pm.expect(res).to.be.an(\"object\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"idBoard\");\r",
							"  const curBoardId = res.idBoard;\r",
							"  const userdBoardId = pm.collectionVariables.get('boardId');\r",
							"  pm.expect(curBoardId).to.eql(userdBoardId)\r",
							"\r",
							"  pm.collectionVariables.set('doneListId', res.id)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?name=Done&idBoard={{boardId}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "Done"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the id of the board where the list is created\", () => {\r",
							"  const res = pm.response.json();\r",
							"\r",
							"  pm.expect(res).to.be.an(\"object\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"idBoard\");\r",
							"  const curBoardId = res.idBoard;\r",
							"  const userdBoardId = pm.collectionVariables.get('boardId');\r",
							"  pm.expect(curBoardId).to.eql(userdBoardId)\r",
							"\r",
							"  pm.collectionVariables.set('todoListId', res.id)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?name=TODO&idBoard={{boardId}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TODO"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new Card into TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the name of the created card\", () => {\r",
							"  const res = pm.response.json();\r",
							"\r",
							"  pm.expect(res).to.be.an(\"object\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"name\");\r",
							"  const curName = res.name;\r",
							"  const usedName = pm.collectionVariables.get('randomCardName');pm.expect(curName).to.eql(usedName)\r",
							"\r",
							"  pm.collectionVariables.set('cardId', res.id)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomName() {\r",
							"    let boardName = Math.random().toString(36).substring(7);\r",
							"    return boardName\r",
							"}\r",
							"pm.collectionVariables.set('randomCardName', randomName())"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards?name={{randomCardName}}&idList={{todoListId}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "name",
							"value": "{{randomCardName}}"
						},
						{
							"key": "idList",
							"value": "{{todoListId}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move a Card from TODO list to DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the id and name of the board\", () => {\r",
							"  const res = pm.response.json();\r",
							"\r",
							"  pm.expect(res).to.be.an(\"object\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"idList\");\r",
							"    pm.expect(res).to.haveOwnProperty(\"idBoard\");\r",
							"  pm.expect(res).to.haveOwnProperty(\"id\");\r",
							"  const curIdList = res.idList;\r",
							"  const curIdBoard = res.idBoard;\r",
							"  const curId = res.id;\r",
							"  const usedIdList = pm.collectionVariables.get('doneListId');\r",
							"  const usedIdBoard = pm.collectionVariables.get('boardId');\r",
							"  const usedId = pm.collectionVariables.get('cardId');\r",
							"  pm.expect(curIdList).to.eql(usedIdList);\r",
							"  pm.expect(curIdBoard).to.eql(usedIdBoard);\r",
							"  pm.expect(curId).to.eql(usedId)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards/{{cardId}}?idList={{doneListId}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{doneListId}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Check the response body', () => {\r",
							"    const res = pm.response.json();\r",
							"\r",
							"    pm.expect(res).to.be.a('object');\r",
							"    pm.expect(res).to.haveOwnProperty('_value');\r",
							"    pm.expect(res._value).to.eql(null)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Board Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiKey",
			"value": "YOUR API KEY",
			"type": "string"
		},
		{
			"key": "apiToken",
			"value": "YOUR API TOKEN",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": "https://api.trello.com"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "randomBoardName",
			"value": ""
		},
		{
			"key": "boardId",
			"value": ""
		},
		{
			"key": "doneListId",
			"value": ""
		},
		{
			"key": "todoListId",
			"value": ""
		},
		{
			"key": "randomCardName",
			"value": ""
		},
		{
			"key": "cardId",
			"value": ""
		}
	]
}