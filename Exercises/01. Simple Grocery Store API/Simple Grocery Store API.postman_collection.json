{
	"info": {
		"_postman_id": "d13ae76e-ee29-45c0-b2f9-c76e108d10ed",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22794277",
		"_collection_link": "https://www.postman.com/orange-eclipse-461318/workspace/postman-course/collection/22794277-d13ae76e-ee29-45c0-b2f9-c76e108d10ed?action=share&source=collection_link&creator=22794277"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "API Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status should be UP\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql('UP');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('At least one available product exists', () => {\r",
									"    const response=pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array');\r",
									"    pm.expect(response.length).to.be.above(0);\r",
									"\r",
									"    const product = response[0];\r",
									"    pm.expect(product).to.be.an('object');\r",
									"    pm.expect(product).to.haveOwnProperty('id');\r",
									"    pm.expect(product.id).to.be.a('number');\r",
									"    pm.expect(product).to.haveOwnProperty('inStock');\r",
									"    pm.expect(product.inStock).to.be.true;\r",
									"\r",
									"    pm.environment.set('productId', product.id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?available=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "eggs",
									"disabled": true
								},
								{
									"key": "results",
									"value": "2",
									"disabled": true
								},
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Single Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response is an object'), function () {\r",
									"    pm.expect(response).to.be.a('object')\r",
									"}\r",
									"\r",
									"pm.test(\"Product name\", function () {\r",
									"  pm.expect(response.name).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Product Price\", function () {\r",
									"  pm.expect(response.price).to.be.a('number');\r",
									"  pm.expect(response.price).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"inStock\", function () {\r",
									"  pm.expect(response.inStock).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test('Correct product was retrieved', ()=>{\r",
									"    pm.expect(response.id).to.eql(pm.variables.get('productId'))\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('The new cart is created successfully', () => {\r",
									"    const cart=pm.response.json();\r",
									"\r",
									"    pm.expect(cart).to.be.an('object');\r",
									"    pm.expect(cart).to.haveOwnProperty('created');\r",
									"    pm.expect(cart.created).to.be.true;\r",
									"    pm.expect(cart).to.haveOwnProperty('cartId');\r",
									"    pm.expect(cart.cartId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('cartId', cart.cartId)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add item to the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('The new item is added successfully', () => {\r",
									"    const item=pm.response.json();\r",
									"\r",
									"    pm.expect(item).to.be.an('object');\r",
									"    pm.expect(item).to.haveOwnProperty('created');\r",
									"    pm.expect(item.created).to.be.true;\r",
									"    pm.expect(item).to.haveOwnProperty('itemId');\r",
									"    pm.expect(item.itemId).to.be.a('number');\r",
									"\r",
									"    pm.environment.set('lastAddedItemId', item.itemId)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH modify item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(maxValue) {\r",
									"    return Math.floor(Math.random() * maxValue +1)\r",
									"}\r",
									"\r",
									"pm.environment.set('randomQuantity', getRandomNumber(14))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"quantity\": \"{{randomQuantity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Replace Product in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": 4646,\r\n    \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DEL delete item in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Ivan\",\r\n   \"clientEmail\": \"ivan_test2@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('The new order is created successfully', () => {\r",
									"    const order=pm.response.json();\r",
									"\r",
									"    pm.expect(order).to.be.an('object');\r",
									"    pm.expect(order).to.haveOwnProperty('created');\r",
									"    pm.expect(order.created).to.be.true;\r",
									"    pm.expect(order).to.haveOwnProperty('orderId');\r",
									"    pm.expect(order.orderId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set('orderId', order.orderId)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Check if the last order is submitted',() => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.a('array');\r",
									"    \r",
									"    const curOrderId = pm.environment.get('orderId');\r",
									"    let flag = false\r",
									"    for (let i=0; i<response.length; i++) {\r",
									"        if (response[i].id === curOrderId) {\r",
									"            flag = true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.expect(flag).to.be.true \r",
									"})\r",
									"\r",
									"pm.test('forEach check if the last order is submitted',() => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.a('array');\r",
									"    const curOrderId = pm.environment.get('orderId');\r",
									"    let flag = false\r",
									"\r",
									"    response.forEach((order) => {if (order.id === curOrderId) {\r",
									"            flag = true;\r",
									"        }})\r",
									"    \r",
									"    pm.expect(flag).to.be.true \r",
									"})\r",
									"\r",
									"pm.test('find method check if the last order is submitted',() => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.a('array');\r",
									"    const curOrderId = pm.environment.get('orderId');\r",
									"    const found = response.find((order) => {return order.id == curOrderId})\r",
									"    \r",
									"    pm.expect(found.id).to.eql(curOrderId)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear()"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"customerName\": \"Coco Jumbo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH add comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment\": \"Test comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DEL delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('The order is deleted successfully', ()=>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.haveOwnProperty('error');\r",
									"    pm.expect(response.error).to.include(pm.environment.get('orderId'))\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing Authentification",
			"item": [
				{
					"name": "Missing Headers",
					"item": [
						{
							"name": "Create an order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"9GLD2me-PbzRkgc6dejRo\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test('Check Error Message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Missing Authorization header.\")\r",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Token",
					"item": [
						{
							"name": "Create an order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "Invalid Token",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"9GLD2me-PbzRkgc6dejRo\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "Invalid Token",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test('Check Error Message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid bearer token.\")\r",
									"})"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid Inputs",
			"item": [
				{
					"name": "GET All Products - Invalid Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Check Error Message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.include(\"Invalid value for query parameter 'category'.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=invalid-category",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category"
								},
								{
									"key": "results",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Products - Results >20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Check Error Message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=21",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category",
									"disabled": true
								},
								{
									"key": "results",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Products - Results <0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Check Error Message', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid value for query parameter 'results'. Must be greater than 0.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category",
									"disabled": true
								},
								{
									"key": "results",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Products - Results = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.environment.name == 'Testing') {\r",
									"\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"    pm.test('Check Error Message', () => {\r",
									"        const response = pm.response.json();\r",
									"        pm.expect(response.error).to.eql(\"Invalid value for query parameter 'results'. Must be greater than 0.\")\r",
									"})\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid-category",
									"disabled": true
								},
								{
									"key": "results",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}